% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EpiCompare.R
\name{EpiCompare}
\alias{EpiCompare}
\title{Compare epigenetic datasets}
\usage{
EpiCompare(
  peakfiles,
  genome_build,
  blacklist,
  picard_files = NULL,
  reference = NULL,
  upset_plot = FALSE,
  stat_plot = FALSE,
  chromHMM_plot = FALSE,
  chromHMM_annotation = "K562",
  chipseeker_plot = FALSE,
  enrichment_plot = FALSE,
  tss_plot = FALSE,
  interact = TRUE,
  save_output = FALSE,
  output_filename = "EpiCompare",
  output_timestamp = FALSE,
  output_dir
)
}
\arguments{
\item{peakfiles}{A list of peak files as GRanges object and/or as paths to
BED files. If paths are provided, EpiCompare creates GRanges object.
EpiCompare also accepts a list containing a mix of GRanges object and paths.
Files must be listed using `list()` and named using `names()`.
If not named, default file names will be assigned.}

\item{genome_build}{The human genome reference build used to generate
peakfiles. "hg19" or "hg38".}

\item{blacklist}{A GRanges object containing blacklisted regions.}

\item{picard_files}{A list of summary metrics output from Picard.
Files must be in data.frame format and listed using `list()`
and named using `names()`.
To import Picard duplication metrics (.txt file) into R as data frame, use
`picard <- read.table("/path/to/picard/output", header = TRUE, fill = TRUE)`.}

\item{reference}{A reference peak file as GRanges object.
If a reference is specified, it enables two analyses: (1) plot showing
statistical significance of overlapping/non-overlapping peaks; and
(2) ChromHMM of overlapping/non-overlapping peaks.
Please make sure that the reference file is listed and named
i.e. `list("reference_name" = reference_peak)`.}

\item{upset_plot}{Default FALSE. If TRUE, the report includes upset plot of
overlapping peaks.}

\item{stat_plot}{Default FALSE. If TRUE, the function creates a plot showing
the statistical significance of overlapping/non-overlapping peaks.
Reference peak file must be provided.}

\item{chromHMM_plot}{Default FALSE. If TRUE, the function outputs ChromHMM
heatmap of individual peak files. If a reference peak file is provided,
ChromHMM annotation of overlapping and non-overlapping peaks is also provided.}

\item{chromHMM_annotation}{ChromHMM annotation for ChromHMM plots.
Default K562 cell-line. Cell-line options are:
\itemize{
  \item "K562" = K-562 cells
  \item "Gm12878" = Cellosaurus cell-line GM12878
  \item "H1hesc" = H1 Human Embryonic Stem Cell
  \item "Hepg2" = Hep G2 cell
  \item "Hmec" = Human Mammary Epithelial Cell
  \item "Hsmm" = Human Skeletal Muscle Myoblasts
  \item "Huvec" = Human Umbilical Vein Endothelial Cells
  \item "Nhek" = Normal Human Epidermal Keratinocytes
  \item "Nhlf" = Normal Human Lung Fibroblasts
}}

\item{chipseeker_plot}{Default FALSE. If TRUE, the report includes a barplot
of ChIPseeker annotation of peak files.}

\item{enrichment_plot}{Default FALSE. If TRUE, the report includes dotplots
of KEGG and GO enrichment analysis of peak files.}

\item{tss_plot}{Default FALSE. If TRUE, the report includes peak count
frequency around transcriptional start site. Note that this can take awhile.}

\item{interact}{Default TRUE. By default, all heatmaps are interactive.
If set FALSE, all heatmaps in the report will be static.}

\item{save_output}{Default FALSE. If TRUE, all outputs (tables and plots) of
the analysis will be saved in a folder (EpiCompare_file).}

\item{output_filename}{Default EpiCompare.html. If otherwise, the html report
will be saved in the specified name.}

\item{output_timestamp}{Default FALSE. If TRUE, date will be included in the
file name.}

\item{output_dir}{Path to where output HTML file should be saved.}
}
\value{
An HTML report
}
\description{
This function compares epigenetic datasets and performs various
functional analyses.The function outputs an HTML report containing results
from the analysis. The report is mainly divided into three areas: (1)
Peakfile information, (2) Overlapping peaks and (3) Functional annotations.
}
\examples{
data("encode_H3K27ac") # example dataset as GRanges object
data("CnT_H3K27ac") # example dataset as GRanges object
data("CnR_H3K27ac") # example dataset as GRanges object
data("hg19_blacklist") # hg19 blacklist dataset
data("hg38_blacklist") # hg38 blacklist dataset
data("CnT_H3K27ac_picard") # example Picard summary output
data("CnR_H3K27ac_picard") # example Picard summary output

# prepare input data
peaks <- list(CnR_H3K27ac, CnT_H3K27ac) # create list of peakfiles
names(peaks) <- c("CnR", "CnT") # set names
picard <- list(CnR_H3K27ac_picard, CnT_H3K27ac_picard) # create list of picard outputs
names(picard) <- c("CnR", "CnT") # set names
reference_peak <- list("ENCODE" = encode_H3K27ac) # reference peak file

EpiCompare(peakfiles = peaks,
           genome_build = "hg19",
           blacklist = hg19_blacklist,
           picard_files = picard,
           reference = reference_peak,
           upset_plot = FALSE,
           stat_plot = FALSE,
           chromHMM_plot = FALSE,
           chromHMM_annotation = "K562",
           chipseeker_plot = FALSE,
           enrichment_plot = FALSE,
           tss_plot = FALSE,
           interact = FALSE,
           save_output = FALSE,
           output_dir = tempdir())

}
